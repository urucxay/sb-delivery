package ru.skillbranch.sbdelivery.repositoryimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.Flowimport kotlinx.coroutines.launchimport ru.skillbranch.sbdelivery.db.dao.DishDaoimport ru.skillbranch.sbdelivery.db.dao.ReviewDaoimport ru.skillbranch.sbdelivery.db.entitiy.Dishimport ru.skillbranch.sbdelivery.db.entitiy.DishItemimport ru.skillbranch.sbdelivery.network.DeliveryServiceimport ru.skillbranch.sbdelivery.network.response.ReviewResponseimport ru.skillbranch.sbdelivery.pref.PrefManagerimport ru.skillbranch.sbdelivery.util.formatimport timber.log.Timberimport java.util.*import kotlin.coroutines.coroutineContextclass DishRepository(    private val service: DeliveryService,    private val dishDao: DishDao,    private val reviewDao: ReviewDao,    private val prefManager: PrefManager) {    suspend fun getReviews(dishId: String): List<ReviewResponse> = service.fetchReviews(dishId)    fun getDishById(id: String): Flow<Dish?> = dishDao.getDishById(id)    fun getDishesByRating(rating: Float = 4.8F, limit: Int = 10) =        dishDao.getDishesByRating(rating, limit)    fun getDishesWithMaxLikeCount(limit: Int = 10) = dishDao.getDishesWithMaxLikeCount(limit)    suspend fun synchronizeData(ifModified: String) {        val scope = CoroutineScope(coroutineContext + Dispatchers.IO)        //TODO remake it later, current version is for testing        for (page in 0..LAST_PAGE) {            scope.launch {                try {                    Timber.d("request to api, page -> $page")                    val response =                        service.fetchDishes(                            offset = page * PAGE_SIZE,                            limit = PAGE_SIZE,                            header = ifModified                        )                    Timber.d("write to db, page -> $page, item count -> ${response.size}")                    dishDao.insert(response.map { it.convertToDish() })                } catch (t: Throwable) {                    Timber.d("Error $t on page -> $page")                }            }.join()            Timber.d("LastUpdateDate - > ${getLastSynchronizationDate()}")        }    }    //TODO remake it later, current version is for testing    companion object {        private const val PAGE_SIZE = 25        private const val LAST_PAGE = 12    }    fun setLastUpdateDate(date: String = Date().format()) {        prefManager.setLastSynchronizationDate(date)    }    fun getLastSynchronizationDate(): String {        return prefManager.getLastSynchronizationDate()    }    suspend fun getRecommendDishes(): Flow<List<DishItem>> {        val dishesIds = service.fetchRecommendDishes()        return dishDao.getDishesByIds(dishesIds)    }}